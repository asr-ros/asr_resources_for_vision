<!--
Copyright (c) 2016, Heizmann Heinrich, Meissner Pascal 
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
-->

<!-- Start Kinect with depth registration to extern left guppy camera. As a result we get a point cloud with better rgb resolution. -->

<!-- This launch-file is a modified version of the orginal openni.launch -->
<launch>

  <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->
  <arg name="camera" default="kinect" />
  <arg name="tf_prefix" default="" />
  <arg name="rgb_frame_id"   default="kinect_rgb_frame" />
  <arg name="depth_frame_id" default="kinect_depth_frame" />

  <!-- device_id can have the following formats:
         "B00367707227042B": Use device with given serial number
         "#1"              : Use first device found
         "2@3"             : Use device on USB bus 2, address 3
         "2@0"             : Use first device found on USB bus 2
    -->
  <arg name="device_id" default="#1" />

  <!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml,
       where ${NAME} is of the form "[rgb|depth]_[serial#]", e.g. "depth_B00367707227042B".
       See camera_info_manager docs for calibration URL details. -->
  <arg name="rgb_camera_info_url"   default="file://$(find asr_resources_for_vision)/launch/image_acquisition_pipelines/kinect/kinect_mild/rgb_A00363A05819052A.yaml" />
  <arg name="depth_camera_info_url" default="file://$(find asr_resources_for_vision)/launch/image_acquisition_pipelines/kinect//kinect_mild/depth_A00363A05819052A.yaml" />

  <!-- Use OpenNI's factory-calibrated depth->RGB registration? -->
  <arg name="depth_registration" default="false" />

  <!-- Arguments for remapping all device namespaces -->
  <arg name="rgb"              default="rgb" />
  <arg name="ir"               default="ir" />
  <arg name="depth"            default="depth" />
  <arg name="depth_registered" default="depth_registered" />
  <arg name="projector"        default="projector" />

  <!-- Optionally suppress loading the driver nodelet and/or publishing the default tf
       tree. Useful if you are playing back recorded raw data from a bag, or are
       supplying a more accurate tf tree from calibration. -->
  <arg name="load_driver" default="true" />
  <arg name="publish_tf" default="false" />
  <!-- Processing Modules -->
  <arg name="rgb_processing"                  default="true"/>
  <arg name="ir_processing"                   default="true"/>
  <arg name="depth_processing"                default="true"/>
  <arg name="depth_registered_processing"     default="true"/>
  <arg name="disparity_processing"            default="true"/>
  <arg name="disparity_registered_processing" default="true"/>
  <arg name="hw_registered_processing"        default="true" />
  <arg name="sw_registered_processing"        default="true" />

  <!-- Disable bond topics by default -->
  <arg name="bond" default="false" /> <!-- DEPRECATED, use respawn arg instead -->
  <arg name="respawn" default="$(arg bond)" />

  <!-- Worker threads for the nodelet manager -->
  <arg name="num_worker_threads" default="4" />

  <!-- Push down all topics/nodelets into "camera" namespace -->
  <group ns="$(arg camera)">
  
    <!-- Start nodelet manager in top-level namespace -->
    <arg name="manager" value="$(arg camera)_nodelet_manager" />
    <arg name="debug" default="false" /> <!-- Run manager in GDB? -->
    <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
      <arg name="name"                value="$(arg manager)" />
      <arg name="debug"               value="$(arg debug)" />
      <arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
    </include>

    <!-- Load driver -->
    <include if="$(arg load_driver)"
	     file="$(find openni_launch)/launch/includes/device.launch.xml">
      <!-- Could really use some syntactic sugar for this -->
      <arg name="manager"               value="$(arg manager)" />
      <arg name="device_id"             value="$(arg device_id)" />
      <arg name="rgb_frame_id"          value="$(arg rgb_frame_id)" />
      <arg name="depth_frame_id"        value="$(arg depth_frame_id)" />
      <arg name="rgb_camera_info_url"   value="$(arg rgb_camera_info_url)" />
      <arg name="depth_camera_info_url" value="$(arg depth_camera_info_url)" />
      <arg name="depth_registration"    value="$(arg depth_registration)" />
      <arg name="rgb"                   value="$(arg rgb)" />
      <arg name="ir"                    value="$(arg ir)" />
      <arg name="depth"                 value="$(arg depth)" />
      <arg name="depth_registered"      value="$(arg depth_registered)" />
      <arg name="projector"             value="$(arg projector)" />
      <arg name="respawn"               value="$(arg respawn)" />
    </include>
    
    <!-- Generate pointcloud with kinect depth data and kinect rgb data -->
    <!-- Load standard constellation of processing nodelets -->
    <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
      <arg name="manager"                         value="$(arg manager)" />
      <arg name="rgb"                             value="$(arg rgb)" />
      <arg name="ir"                              value="$(arg ir)" />
      <arg name="depth"                           value="$(arg depth)" />
      <arg name="depth_registered"                value="$(arg depth_registered)" />
      <arg name="projector"                       value="$(arg projector)" />
      <arg name="respawn"                         value="$(arg respawn)" />
      <arg name="rgb_processing"                  value="$(arg rgb_processing)" />
      <arg name="ir_processing"                   value="$(arg ir_processing)" />
      <arg name="depth_processing"                value="$(arg depth_processing)" />
      <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)" />
      <arg name="disparity_processing"            value="$(arg disparity_processing)" />
      <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)" />
      <arg name="hw_registered_processing"        value="$(arg hw_registered_processing)" />
      <arg name="sw_registered_processing"        value="$(arg sw_registered_processing)" />
    </include>
    
    <!-- Generate pointcloud with kinect depth data and extern rgb data -->
    <!-- Registration nodelet, projecting depth to RGB camera -->
    <group>
      <arg name="rgb_extern"              default="/stereo/left" />
      <arg name="depth_registered_with_extern" default="depth_registered_with_guppy" />
      <!-- For distinguishing multiple register/XYZRGB nodelets. Default fails if rgb
	  or depth contains a namespace. -->
      <arg name="suffix" default="with_guppy" />
    
      <node pkg="nodelet" type="nodelet" name="register_$(arg suffix)"
	    args="load depth_image_proc/register $(arg manager) $(arg bond)"
	    respawn="$(arg respawn)">
	<!-- Explicit topic remappings, shouldn't need all of these -->
	<remap from="rgb/camera_info"             to="$(arg rgb_extern)/camera_info" />
	<remap from="depth/camera_info"           to="$(arg depth)/camera_info" />
	<remap from="depth/image_rect"            to="$(arg depth)/image_rect_raw" />
	<remap from="depth_registered/image_rect" to="$(arg depth_registered_with_extern)/sw_registered/image_rect_raw" />
      </node>

      <!-- Publish registered XYZRGB point cloud with software registered input -->
      <node pkg="nodelet" type="nodelet" name="points_xyzrgb_sw_registered_$(arg suffix)"
	    args="load depth_image_proc/point_cloud_xyzrgb $(arg manager) $(arg bond)"
	    respawn="$(arg respawn)">
	<!-- Explicit topic remappings, shouldn't need all of these -->
	<remap from="rgb/image_rect_color"        to="$(arg rgb_extern)/image_rect_color" />
	<remap from="rgb/camera_info"             to="$(arg rgb_extern)/camera_info" />
	<remap from="depth_registered/image_rect" to="$(arg depth_registered_with_extern)/sw_registered/image_rect_raw" />
	<remap from="depth_registered/points"     to="$(arg depth_registered_with_extern)/points" />
      </node>

      <!-- Rectified depth image -->
      <node pkg="nodelet" type="nodelet" name="$(arg depth_registered_with_extern)_sw_metric_rect"
	args="load depth_image_proc/convert_metric $(arg manager) $(arg bond)"
	respawn="$(arg respawn)">
	<remap from="image_raw" to="$(arg depth_registered_with_extern)/sw_registered/image_rect_raw" />
	<remap from="image"     to="$(arg depth_registered_with_extern)/sw_registered/image_rect" />
      </node>

    </group>
  
  </group> <!-- camera -->
</launch>